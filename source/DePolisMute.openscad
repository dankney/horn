// Generates a DePolis-style Stright Mute
// Â©2025 by Don Ankney
// This code is licensed under GNU General Public License v2.0. To view a copy of this license, visit https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
// Models generated by this code are licensed underis licensed under CC BY-SA 4.0. To view a copy of this license, visit https://creativecommons.org/licenses/by-sa/4.0/


// Dependencies
//  -- https://github.com/BelfrySCAD/BOSL2

include <BOSL2/std.scad>
include <BOSL2/threading.scad>

// Default Dimensions (also declares variable in global scope)
    VariantName = "Default";
    LowerCirc = 325;
    UpperCirc = 310;
    BaseHeight = 65;
    TipExtD = 40;
    TipIntD = 30;  
    TubeRadius = 20;
    TubeHeight = 150;
    TotalHeight = 195;
    tubeMountHeight = 30;
    wallThickness = 2;
    circleRes = 360;

// Base Section
module baseSection (lowerCirc, upperCirc, baseHeight, wallThickness) { 
    lowerR = lowerCirc / PI / 2;
    upperR = upperCirc / PI / 2;
    difference() {
        cylinder($fn = circleRes, baseHeight, lowerR + wallThickness, upperR + wallThickness, center=false);
        cylinder($fn = circleRes, baseHeight, r1=lowerR, r2 = upperR, center = false);
    }
}


// Tube Mount
module tubeMount(innerRadius, wallThickness, mountHeight = 30) {
   difference(){
       union(){
           //minkowski(){
              translate([0, 0, 5])
                cylinder($fn = circleRes, h = mountHeight - 5, r = innerRadius + wallThickness, center = false);
               //sphere(d = 5); //sphere is 5 in original
            //}
            rotate_extrude(convexity = 10, $fn = circleRes)
                translate([0.1,0,0])
                    polygon(points = [[innerRadius + 5 + wallThickness ,0], [0,innerRadius], [innerRadius + 5, innerRadius ]]);
        }
          
       //cylinder(h = mountHeight, r = innerRadius, center = false);
       trapezoidal_threaded_rod(d = innerRadius * 2, l = mountHeight * 3, pitch = 3, internal = true);
   }

}

// Top Section with Tube Mount
module topSection (baseC, topD, topHeight, wallThickness) {
    baseR = baseC / PI / 2;
    topR = topD / 2;

    
    difference() {
        cylinder ($fn = circleRes, h = topHeight, r1 = baseR + wallThickness, r2 = topR + wallThickness);
        cylinder ($fn = circleRes, h = topHeight, r1 = baseR, r2 = topR);
    }
    translate([0, 0, topHeight - tubeMountHeight])
        tubeMount(TubeRadius, wallThickness, tubeMountHeight);     
}

// Tube
module tuningTube(tubeRadius, tubeLength) {
    ExtDiameter = tubeRadius * 2 - 2;
    IntRadius = tubeRadius - 4;

    
    difference() {
        union(){
           
            cylinder(h=5, r1=ExtDiameter / 2, r2=ExtDiameter / 2 + 4);
            translate([0, 0, tubeLength / 2])
                trapezoidal_threaded_rod(d=ExtDiameter, h=tubeLength, pitch=3);
        }
        cylinder(h=tubeLength, r1=IntRadius, r2=IntRadius, center=false);
    }
}

// Text On Bottom
module watermark (RADIUS, RADIUS2, ARC_ANGLE, stext) {
    
    chars = len( stext );

    difference(){
        cylinder($fn=circleRes, r1=RADIUS, r2= RADIUS2 + 2, h=10,center=true);

        for(i=[0:1:chars]){
          rotate([0,0,i*ARC_ANGLE/chars]){
            translate( [RADIUS*.95,0,0])
              rotate([90,0,90])
                linear_extrude(7)
                  text(stext[i],size=6, valign="center",halign="center");
            }
        }
    }
}

// Mute Body Assembly
module mute(){
    translate([0, 0,  BaseHeight])
        topSection(UpperCirc, TipExtD, TotalHeight - BaseHeight, wallThickness);
    
    baseSection(LowerCirc, UpperCirc, BaseHeight, wallThickness);
    
    cylinder($fn = circleRes, h = 10, r = LowerCirc / PI / 2);
    
    translate([0,0,-5])
        watermark(RADIUS = UpperCirc / PI / 2, RADIUS2 = LowerCirc / PI / 2, ARC_ANGLE = 160, stext = [ "d","i","y","m","u","t", "e","s",".","o","r","g", "/", "D", "e", "P", "o", "l", "i", "s" ]);
    
}


// There are three variations 
// To choose which variation of the DePolis Mute to generate, set this variable
muteVariation = "2";

//JR Variant
if (muteVariation == "1") { 
    // Dimensions
    echo("ONE");
    VariantName = "JR Variant";
    LowerCirc = 290;
    UpperCirc = 290;
    BaseHeight = 90;
    TipExtD = 45;
    TipIntD = 40;
    TubeRadius = 22.5;
    TubeHeight = 150;
    TotalHeight = 175;
    tubeMountHeight = 30;
    wallThickness = 2;
    circleRes = 360;
    // Render Mute
    mute();
    translate([LowerCirc / PI, LowerCirc / PI, - 10])
        tuningTube(TubeRadius, TubeHeight);
} else

// DW Variant
if (muteVariation == "2") { 
    VariantName = "DW Variant";
    echo("TWO");
    echo(VariantName);
    LowerCirc = 325;
    UpperCirc = 325;
    BaseHeight = 65;
    TipExtD = 45;
    TipIntD = 35;
    TubeRadius = 22.5;
    TubeHeight = 130;
    TotalHeight = 175;
    tubeMountHeight = 30;
    wallThickness = 2;
    circleRes = 360;
    
    // Render Mute
    mute();
    translate([LowerCirc / PI, LowerCirc / PI, - 10])
        tuningTube(TubeRadius, TubeHeight);
} else

// HB Variant
if (muteVariation == "3") {
   VariantName = "HB Variant";
    LowerCirc = 325;
    UpperCirc = 310;
    BaseHeight = 65;
    TipExtD = 40;
    TipIntD = 30;
    TubeRadius = 22.5;
    TubeHeight = 150;
    TotalHeight = 195;
    tubeMountHeight = 30;
    wallThickness = 2;
    circleRes = 360;
    
    // Render Mute
    mute();
    translate([LowerCirc / PI, LowerCirc / PI, - 10])
        tuningTube(TubeRadius, TubeHeight);
}
